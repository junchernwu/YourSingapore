{"remainingRequest":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/natalie/Desktop/BT3103/project/YourSingapore/src/components/ActivityList.vue?vue&type=template&id=736a9dfd&scoped=true&","dependencies":[{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/src/components/ActivityList.vue","mtime":1602917172545},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":1602916580791},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1602916587602},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":1602916580791},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/index.js","mtime":1602916587601}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}