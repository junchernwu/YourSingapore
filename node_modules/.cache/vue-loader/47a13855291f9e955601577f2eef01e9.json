{"remainingRequest":"/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/src/components/ActivityDetails.vue?vue&type=template&id=ab945e9a&scoped=true&","dependencies":[{"path":"/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/src/components/ActivityDetails.vue","mtime":1602652590065},{"path":"/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":1602652484237},{"path":"/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1602652487653},{"path":"/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":1602652484237},{"path":"/Users/junchernwu/OneDrive - National University of Singapore/Y3S1/bt3103/YourSingapore/node_modules/vue-loader/lib/index.js","mtime":1602652487652}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}