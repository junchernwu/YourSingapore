{"remainingRequest":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/natalie/Desktop/BT3103/project/YourSingapore/src/components/Eateries.vue?vue&type=template&id=735f75e2&scoped=true&","dependencies":[{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/src/components/Eateries.vue","mtime":1603294087023},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natalie/Desktop/BT3103/project/YourSingapore/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}