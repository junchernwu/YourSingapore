{"remainingRequest":"/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sabrina/Y2S1/BT3103/YourSingapore/src/components/ActivityDetails.vue?vue&type=template&id=ab945e9a&scoped=true&","dependencies":[{"path":"/Users/sabrina/Y2S1/BT3103/YourSingapore/src/components/ActivityDetails.vue","mtime":1603013545746},{"path":"/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sabrina/Y2S1/BT3103/YourSingapore/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}